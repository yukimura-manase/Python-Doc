
< Djangoとは？ >

1. DjangoとはPythonでWebアプリを開発する際に使う「Webフレームワーク」というものです。

「Webフレームワーク」とは？
Webフレームワークとは、Webアプリ開発をする際に、開発の効率を上げる役立つ機能が最初から備わっているツール！

Djangoとは、Pythonで作られているWebフレームワークです。
Djangoを使うことで、高品質なWebアプリケーションを簡単に、少ないコードで作成することができます。シンプルなWebアプリであれば、数分で作ってしまうことも可能です。

また、DjangoではInstagramやPinterestなどのよく知られたWebアプリでも動いています。


< PythonのDjangoの特徴 >

1. 全部入り
    Webアプリ開発でよく使われる、「ユーザー認証」「管理画面」「サイトの案内ぺージ」「RSSフィード」など、よく使われる機能はあらかじめ含まれています。

2. セキュリティが安心
    たくさんの共通する脅威に対して対策が施されています。ユーザー認証システムでは、ユーザーのアカウントとパスワードを安全に管理する方法が提供されてします。

3. 拡張性、柔軟性が高い
    Djangoで扱う各ファイルは役割が決まっており、別々に切り分けて開発を行うことができます。

    よって、それぞれ部品の独立性が高く、拡張することが容易になっています。どんな規模のWEBアプリでも、柔軟に対応できるのです。

4. 用途が広い
    Djangoは、会社や組織、そして政府にも利用されています。管理システム、ソーシャルネットワーク、科学技術計算など幅広い用途に対応しています。


< Djangoのメリット >

1. 生産性が高く、信頼できる
    開発スピードは、「締め切りの味方である完全主義者」のモチーフが掲げられているほどです。

    アプリ開発ではスケージュル通りにいかず遅れてしまうことも多いのですが、Djangoは締め切りに間に合わせる完全主義者を謳っています。

    また、オープンソースなので、世界中の開発者によって日々盛んに改良されており、どんどん使いやすくなっています。

    先程解説した、InstagramやPinterestもDjangoで作られているので、信頼性についても安心して使うことが出来ます。

2. 実用性が高い
    現在の開発方法に合致しており、非常に実用的です。
    
    Webアプリを新しく開発する際には、まずはじめに「開発にはどれぐらいの期間がかかりそうか」などの情報を得るために、模型を作って試験を行うことが多いです。

    この模型を作って試験を行うことをプロトタイプといいます。Djangoはこのプロトタイプを作ることが簡単なので、開発期間を短くすることができるのです。

< Djangoを使いこなすために知っておくべき知識とは？ >

1. 管理サイト

    1つ目は、管理サイトです。Webアプリを開発するときは、ユーザーが使う画面以外に、データを管理する画面「管理サイト」を作ります。

    「でも、データの管理ならプログラムやデータベースを直接操作しても、変更できるのでは？」と思った方もいるかもしれませんね。

    管理サイトを用意する理由は、アプリを運営する管理者が、必ずしもプログラミングに詳しいとは限らないからです。
    
    プログラミングがわからない人でもデータを管理できるよう、専用の画面を用意するイメージです。

2. データベース操作

    2つ目は、データベース操作です。アプリ開発をする上では、データを扱うことは必須となります。

    そしてデータを扱うときは、データベースを使うのが一般的です。そのため、データベースの操作についても、覚えておきましょう。


【Python入門】Djangoとは？基礎知識 + 使い方を解説！
https://www.sejuku.net/blog/9014



Django(ジャンゴ)とは？Pythonのフレームワークを活用し、Web開発に役立てよう

『Django』とは、Webアプリケーションフレームワークの一つです。様々な機能を搭載していて、簡単なWebアプリケーションであれば、ものの数分で完成できることもあります。

今回は、Djangoの概要やメリット、インストール方法、チュートリアルの実施方法についてお伝えします。



Django(ジャンゴ)とは？Pythonのフレームワークを活用し、Web開発に役立てよう
https://udemy.benesse.co.jp/development/system/django.html



---------------------------------------------------------------------------------------------------------------------------------------

< Django関連のコマンド & 環境構築 >

# Djangoのインストール
pip install Django

# 最新版にアップデートする
pip install -U Django

#  Djangoプロジェクトの作成
django-admin startproject django_app(プロジェクト名)

# DjangoのWebサーバーを起動！ => プロジェクトの実行
python manage.py runserver


< Django モデル-DB関連 >

# マイグレーションファイルを作成する！ => migration(移行)により、モデルからテーブルを作成する！！
python manage.py makemigrations 実行プロジェクト名

# マイグレーションを実行する！
python manage.py migrate


# DjangoDB管理者の作成
python manage.py createsuperuser


---------------------------------------------------------------------------------------------------------------------------------------

< Djangoプロジェクトの構造 >

#  Djangoプロジェクトの作成
django-admin startproject django_app(プロジェクト名)

Djangoプロジェクトの中身を見てみよう！！

    1. Djangoプロジェクトでは「プロジェクトと同じ名前のフォルダ」にプロジェクト全体で使用するファイルが生成される！ => 今回は「django_app」フォルダが生成される！

    2. manage.pyファイル => プロジェクトで実行される機能に関するプログラム

---------------------------------------------------------------------------------------------------------------------------------------

< DjangoとMVCアーキテクチャー >

1. Djangoは「MVCアーキテクチャー」と呼ばれる考え方に基づいて設計されている！

2. 「 MVCアーキテクチャー 」 => Model, View(Template), Controller の3つの役割を持ったパーツ(部品)で構成されている！

    Model(モデル) => データアクセス関係の処理を担当するもの => 「Webアプリ」と「データベース」の間のやり取りをするもの

    View(ビュー) => 画面表示関係を担当するもの => 「Webページ」を作るための部分

    Controller(コントローラー) => 全体の制御を担当するもの => Webアプリで作成する「プログラム」の部分


    ① 「 ユーザー・Webにアクセス！ => Controller <=> View(Template) <=> 画面表示  」

    ② 「 ユーザーに結果を表示 <= Controller <=> Model <=> データベース 」


---------------------------------------------------------------------------------------------------------------------------------------

< Djangoプロジェクトとアプリケーション >

1. まずは「Djangoプロジェクト」の作成　

    #  Djangoプロジェクトの作成コマンド
    django-admin startproject django_app(プロジェクト名)


2. 「Djangoプロジェクト」内に、複数の「アプリケーション」(MVCアプリ)を作成していく！ => アプリを組み合わせてプロジェクトを作成していく！

    # 「 アプリケーション 」の作成コマンド
    python manage.py startapp robotama
    (3系じゃないとエラーがでる)

    この「アプリケーション」が1つの「MVC構造」を持っている！


    例えば、「オンラインショップ」のWebサイトを作成するプロジェクトの場合

    1. ユーザー管理アプリ => 1つのMVCアプリ

    2. 在庫管理アプリ => 1つのMVCアプリ

    3. カート管理アプリ => 1つのMVCアプリ

    上記のように「1つのプロジェクト内に3つのMVCアプリ」が存在することとなる！

---------------------------------------------------------------------------------------------------------------------------------------

< Djangoは、MTVフレームワーク >

「 MTVフレームワーク 」 => 公式ドキュメントによるとDjangoはMTVフレームワークとされています。

他のWebフレームワークはほとんどが「 MVCフレームワーク 」と呼ばれているのに、なぜDjangoが 「 MTVフレームワーク 」と呼ばれているか疑問な人も多いはずです。

ここでは「MVC」と「MTV」を比較し、なぜDjangoが「 MTVフレームワーク 」なのかについて知っていきましょう。

< MVCフレームワーク >

Ruby on RailsやLaravelで使われているMVCフレームワーク => この「MVC」はM（モデル）、V（ビュー）、C（コントローラー）で構成されています。

    M（モデル） => 「モデルは主にDBに関連する機能」です。データベースの「テーブルやフィールドを定義する」ことができます。

    V（ビュー） => 「ビューはフロントエンドの役割」をします。
    
                View = みる という意味でユーザーの目に触れる「クライアントサイドを担当」します。

    C（コントローラー） => 「コントローラーはモデルで定義されたデータをビューに受け渡す中間層のような役割」をします。
    
                ここが「バックエンドサイドのメインとなる機能」です。

    MVCフレームワークでは上記のような構成でWebフレームワークが構成されます。

どの「 Webフレームワーク 」にかかわらず、Web開発において主となる要素が
    
    1. DB関連
    2. フロントエンド関連
    3. バックエンド関連

の３つです。これをRailsやLaravelでは「MVC」と呼び、Djangoでは「MTV」と呼びます。


< MVCアーキテクチャーの場合 >

1. DB関連 => Model

2. フロントエンド関連 => View

3. バックエンド関連 => Controller



< MTVフレームワーク >

Djangoは「 MTVフレームワーク 」であると上述しましたが、その内容は「 MVCフレームワーク 」とほとんど変わりません。

呼び方はそれぞれ 「M（モデル）、T（テンプレート）、V（ビュー）」となります。

少し違うのが、「T（テンプレート）がフロントエンド」を扱い、「V（ビュー）がバックエンド」を担います。

MVCの一部であるC（コントローラー）の役割は、「DjangoのURLルーティング機能を含んだシステム機能自体が担っている」そうです。

この呼び方にはDjango特有の思想が存在しているそうで、公式ドキュメントによると

    ビューにはデータの「見せ方」を書く必要はなく、表示したいデータの「選び方」を書くものだと考えます。

    「ユーザが見るのはどのデータなのか」を書くのであって、
    
    「ユーザに対するデータの表示の仕方を書くわけではない」ということです。
    
    この二つは明らかに違います。

つまり、Djangoでは、、、

M（モデル）=> 「DBに関連する設定やテーブル名、そのフィールド名や機能、設定」などを扱います。

        該当するファイルは「models.py」です。

T（テンプレート）=> 「フロントエンドにて、データを表示する機能」を扱います。

        該当するファイルは「templatesフォルダ直下のhtmlファイル」です。

V（ビュー）=> 「テンプレート」（フロントエンド）にてデータをユーザーに表示するために、「バックエンドでそのデータを選択したり、整形したりする機能」を扱います。

        該当するファイルは「views.py」です。

上記に加えて、Djangoでは「URLsのルーティングシステム」を用いて、MVCのC（コントローラー）の機能の一部を担っています。

こちらは「urls.py」というファイルを記述します。


< Djangoの新規機能を実装する手順 >

これらを踏まえて、Djangoにて新規機能を実装する際は、

まず「M（モデル）の範囲であるDBの設定」を行い、「V（ビュー）にてバックエンドを設計」します。

その後、「URLsでルーティング設定」を行い、「T（テンプレート）にてフロントエンドを記述」していきます。

Djangoを使ったWeb開発においてこのMTVを意識することは少ないかもしれませんが覚えておくと実装がはかどり、Djangoの理解がさらに深まるでしょう。


< MTVアーキテクチャーの場合 >

1. DB関連 => Model

2. フロントエンド関連 => Template

3. バックエンド関連 => View => 「ユーザが見るのはどのデータなのか」を書く！すなわち、表示したいデータの「選び方」を書く！


MTVフレームワーク
https://just-python.com/document/django/introduction/mtv

---------------------------------------------------------------------------------------------------------------------------------------

< Djangoのプロジェクト構成(初期段階) >

Djangoでプロジェクトを作成すると自動でいくつかのフォルダとファイルが作成され、同ディレクトリに配置されます。

    例えば、「sample_app」という名前でプロジェクトを作成すると初め以下のようなファイルが作成されます。

    sample_app = {
        sample_app = {
            init.py
            asgi.py
            settings.py
            urls.py
            wsgi.py
        },
        manage.py
    }


< アプリケーションの追加後のプロジェクト構成 >

基本的には、プロジェクトの作成後、アプリケーションを追加していきます。

ここでは、「account」と「function」というアプリケーションを追加したと仮定しましょう。

２つのフォルダとファイルが自動で作成されプロジェクトフォルダは以下のようになります。

sample_app = {

    account = {
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        views.py
    },
    function = {
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        views.py
    },
    sample_app = {
        __init__.py
        asgi.py
        settings.py
        urls.py
        wsgi.py
    },
    manage.py
}


< configディレクトリ >

プロジェクトを作成した時に作成されるフォルダをここでは「configディレクトリ」と呼びましょう。

基本的にはこのフォルダ名はプロジェクト名と同じ名前が適用されます。

まずはこのフォルダ内のファイルとmanage.py について触れていきましょう。

1. sample_app/__init__.py

    Python関連のパッケージをインポートする際に読み込まれる初期化用ファイル。 *このファイルは触ることがほぼないので無視で大丈夫です。

2. sample_app/asgi.py

    Django3から登場したファイルです。

    Djangoにリアルタイムな双方向通信機能を持たしてデプロイ/稼働する際に必要となります。こちらも基本的なユースケースでは必要になることはありません。

3. sample_app/settings.py

    プロジェクトのディレクトリ指定や各ファイルの指定、その他プロジェクトに関する全ての設定がここで記述されます。

    実際に記述する内容は多いので少しづつ必要なところから覚えていけると良いと思います。

4. sample_app/urls.py

    プロジェクトのルーティングを設定するのに必要なファイルです。
    
    各appにそれぞれurls.pyを手動で追加し、それらのurls.pyをこのconfigフォルダ内のurls.pyに読み込んでプロジェクト全体のルーティングを記述するのが一般的です。
    
    書き方はほぼ定型なので一度覚えてしまうと簡単です。

5. sample_app/wsgi.py

    基本的にDjangoをデプロイ/稼働する際に必要となるファイルです。
    
    何か記述するものがあるわけではありませんのでこちらも学習段階では無視で大丈夫です。

6. manage.py

    Djangoの全てのプログラムがこの「manage.py」をトリガーとして行われます。
    
    そのためappを追加する際やDBを更新する際などには必ず「 python manage.py 」という記述を行います。


< appディレクトリ >

appを追加すると自動でそのappの名前を持ったディレクトリが自動作成されます。自動作成されるファイルについて触れていきましょう。

1. */__init__.py => アプリケーションの初期化処理のためのもの

    上述の__init__.pyと同じ役割です。 こちらは無視で大丈夫です。

2. */admin.py => 管理者ツールのためのもの

    Djangoにはプロジェクトの作成と同時に自動で「データの管理画面」が作成されます。
    
    この管理画面で表示するデータの設定や機能の追加などをここで行います。
    
    ここは管理者画面の立ち位置なので、会員登録機能などで作られるユーザーでは入ることができず、スタッフ権限を持ったユーザーのみがログインして閲覧することができます。

3. */apps.py => アプリケーション本体の処理をまとめる！

    ここにはappの設定を記述することでその内容をconfigフォルダのsettings.pyで読み込めるようにし、結果的にプロジェクト全体に、該当するappの機能を反映しています。
    
    デフォルトですでに必要なコードが記述されてあるのでこちらもほぼ触れることはありません。

4. */models.py (重要)

    前章のMTVフレームワークで触れた「M」（モデル）の部分であり、「DBに登録するテーブルを記述」していきます。
    
    基本的には「Classベース」で記述していき、最終的に「migrate」というアクションで「データ構造をデータベースに登録」します。

5. */tests.py

    Djangoのもつユニットテスト機能をこのtests.pyを使用して行うことができます。
    
    初めはあまりテストを意識することはないと思うので触れる機会は少ないかもしれませんが、開発を進めていくにつれてこの記述を行っていくことになるでしょう。
    
    ここでは開発で使用しているデータベースとは別にダミーのデータベースを立てることができ、それを使用して自分の作った機能がうまく動くかテストすることができます。

6. */views.py (重要)
    
    前章の「MTVフレームワーク」で触れた「V」（ビュー）の部分であり、Djangoプロジェクトの中核を担います。
    
    主に「バックエンド」となるファイルです。
    
    このファイルに「models.py」からClassを読み込んだり、各種パッケージ機能などを読み込んだりしながらhtmlファイルの設定や投げるデータの登録、
    「バックエンドとしての機能」を持たせることができます。このファイルを使用することが一番多いでしょう。

7.（任意）*/urls.py => app内のルーティング登録！

    一般的なDjangoの開発手法では、自分で「urls.py」をappフォルダ内に作成することが多いです。
    
    ここにviews.pyで作成したClassまたは関数を読み込んでapp内のルーティングを登録します。


基本的には上述したファイル群がappを追加するごとに作成されます。

プロジェクト内で機能ごとにappを分けることが多いので、大まかな機能の領域ごとにappが存在することになります。

例えば、アカウント機能、サービスの主要機能、通知機能となれば3つのappを追加することになり、その数だけ上述したファイルが作られることになります。


< その他のフォルダ >

「configフォルダ」と「appフォルダ」以外にも「staticフォルダ」と「templatesフォルダ」を作成することがあります。

Djangoの慣習に従うと、フロントエンドを記述するために各appフォルダにさらにstaticフォルダとtemplatesフォルダを作成し、staticの中にcssやjsファイル、templatesの中にhtmlファイルを作成することが書かれています。

しかし、実際に開発現場となるとこれらのフォルダをconfigフォルダやappフォルダと同じ階層に置くことが多いです。

少しsettings.pyをいじることで、staticとtemplatesフォルダをプロジェクトの階層に作り、全てのフロントエンド関連のファイルをまとめて置くことができます。

そうなった場合、configフォルダとappフォルダの他にも staticフォルダとtemplatesフォルダがプロジェクト内に設置されます。


Djangoのプロジェクト構成
https://just-python.com/document/django/introduction/directory

---------------------------------------------------------------------------------------------------------------------------------------

< プロジェクト構造を理解する！ >

「ロボ玉プロジェクト」を作成！

robotama_app = {

    # ロボ玉プロジェクトのconfigとなるフォルダー
    robotama_app = {
        __init__.py     // 初期化処理を行うスクリプトファイル
        asgi.py         // ASGIという非同期Webアプリのためのプログラム
        settings.py     // プロジェクトの設定情報を記述したファイル
        urls.py         // プロジェクトで使うURL(Webアクセス時のアドレス)を管理するファイル
        wsgi.py         // WSGIという一般的なWebアプリのプログラム
    },

    robotama試作1号機 = {
        migrationsフォルダ　 // データベース関連の機能をまとめたフォルダ
        __init__.py        // アプリの初期化処理のためのもの
        admin.py           // 管理者ツールのためのもの
        apps.py            // アプリケーション本体の処理をまとめる！
        models.py          // モデルに関する処理を記述する！
        tests.py           // プログラムのテストに関するもの
        views.py           // 画面表示に関するもの
    },
    robotama試作2号機 = {
        migrationsフォルダ
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        views.py
    },
    
    manage.py           // プロジェクトで実行するさまざまな機能に関するプログラム => コマンド操作する際の実行処理の内容が記述されている！
}


< MTVアーキテクチャーの場合 >

1. DB関連 => Model

2. フロントエンド関連 => Template

3. バックエンド関連 => View => 「ユーザが見るのはどのデータなのか」を書く！すなわち、表示したいデータの「選び方」を書く！



---------------------------------------------------------------------------------------------------------------------------------------

< views.py >

① view.py => 「画面の表示に関する処理」を書く！ => 画面に関する関数などをまとめて記述するファイル

② MTVアーキテクチャーの「 View部分 」を担当！ => バックエンド処理(画面に関する処理を記述)

< HttpResponse機能の実装 >

    from django.shortcuts import render
    from django.http import HttpResponse    # HttpResponse機能を読み込み！

    # 引数にrequestを設定 => HttpResponseのインスタンスをreturn
    def index(request):
        return HttpResponse("Hello ロボ玉！！")



< render関数・テンプレートを表示する処理 >

① render関数は、テンプレートをレンダリングするための関数 => Djangoに用意されているショートカット関数の1つ！

② 使い方 => render( HttpRequest, テンプレートパス )

    第1引数 => HttpRequestのインスタンス

    第2引数 =>「templates」ディレクトリからのパス！

    第3引数 => 「params」などのパラメーター

③ 基本的な記述(具体例)

    1. プロジェクト/config/urls.py

        from django.contrib import admin
        from django.urls import path,include

        urlpatterns = [
            path('admin/', admin.site.urls),
            path('robotama/', include('robotama.urls')),
        ]


    2. プロジェクト/app/urls.py

        from django.urls import path
        from . import views

        urlpatterns = [
            path('', views.index, name = 'index'),
        ]

    3. プロジェクト/app/views.py

        from django.shortcuts import render
        from django.http import HttpResponse # HttpResponse機能を読み込み！


        def index(request):

            return render(request, 'robotama/index.html')    # render( HttpRequest, テンプレートパス )



④ パラメーターを持たせる場合

    【 templates/robotama/index.html 】

    <body>
        <h1>{{ title }}</h1>
        <h2>{{ msg }}</h2>
    </body>


    【 robotama/views.py 】

    def index(request):

        params = {
            'title': 'ロボ玉プロジェクト',
            'msg': 'ロボ玉試作1号機',
        }

        return render(request, 'robotama/index.html', params)
        

        



---------------------------------------------------------------------------------------------------------------------------------------

< urls.py >

① urls.py => URLを管理する！ => どのアドレスにアクセスをしたら、どの処理を実行するかを定義するファイル => ルーティング処理のファイル

② 基本的に「各アプリごとにurls.pyを用意」する！ => 「アプリケーションのアドレスはアプリケーション内で管理させるルール」

< 基本的なルーティング処理 >

    【 robotama_app/urls.pyの中身 】

    from django.contrib import admin
    from django.urls import path
    import robotama.views as robotama # robotamaアプリのviews.pyをrobotamaとして読み込んでいる！

    # urlのパターンごとの処理を記述する！
    urlpatterns = [
        path('admin/', admin.site.urls), => 管理者画面
        path('robotama/', robotama.index),
    ]


    「 urlpatterns 」に登録した情報を元に、「どのアドレスにアクセスしたらどの処理が呼び出されるか」が決まる！


< pathメソッド >

pathメソッドを「urlpatternsリスト」に追加していく！

1. 基本の形
path( アクセスするアドレス, 呼び出す処理 ) => アドレスにアクセスがあったら処理を実行！

    # (翻訳)「 robotama/ 」アドレス(url)にアクセスがあったら、「robotamaアプリのviews.py」(as robotamaしてる！)の「index」を実行する！
    path('robotama/', robotama.index)

< ポイント >
ひとつのappがオブジェクトとして定義されている！

2. 
path( アクセスするアドレス, 呼び出す処理, 名前の設定 )

    < 事例 >
    path('', views.index, name = 'index'),




② の「アプリケーションのアドレスはアプリケーション内で管理させる！！」ルールに則って、コード変更！


    【 robotama_app/robotama/urls.pyの中身 】(プロジェクト・アプリ)

        from django.urls import path
        from . import views

        urlpatterns = [

            # 「 http://○○/robotama/ 」にアクセスしたらviews.pyのindex関数を呼び出す！
            path('', views.index, name = 'index'),
        ]

        # path内のアドレスが空のテキストになっている！ => 「 http://○○/robotama/ 」という意味


    【 robotama_app/urls.pyの中身 】(プロジェクト本体・config)

        from django.contrib import admin
        from django.urls import path,include

        urlpatterns = [
            path('admin/', admin.site.urls),

            # robotamaアプリのurls.pyを読み込まれて、「 robotama/ 」に割り当てられている！
            path('robotama/', include('robotama.urls')),    # includeメソッド => 引数に指定したモジュールを読み込む！
        ]


< includeメソッド >

includeメソッド => 引数に指定したモジュールを読み込む！



< ルーティング設定 >

# 2パターンのurl設定(アドレス設定・ルーティング設定)をしている！

    urlpatterns = [
        path('', views.index, name = 'index'),
        path('next', views.next, name = 'next'), 
    ]




---------------------------------------------------------------------------------------------------------------------------------------

< クエリパラメーター >

クエリパラメーターとは？ => アドレスの後につけて記述するパラメーター

クエリパラメーターは、アドレスにつけた値をそのままサーバーに送る！！

クエリパラメーターの記述ルール => 「?」の後に「key=value」の形式で記述する！

    http://アドレス?キー(key)=値(value)&・・・


【 robotama_app/robotama/views.pyの中身: Part1 】

    1. クエリパラメーターを受け取って処理する関数作成

    def index(request):
        msg = request.GET['msg']
        return HttpResponse('ロボ玉・Type:' + msg + 'なり！！')

    2. クエリパラメーターを渡してurlアクセスする！

    http://localhost:8000/robotama/?msg=ロボ玉

    3. 「 ロボ玉・Type:ロボ玉なり！！ 」と表示される！



    【 robotama_app/robotama/views.pyの中身: Part2 】

    def index(request):

    if 'msg' in request.GET:        # inで指定のkeyが辞書にあるか調べている！！

        msg = request.GET['msg']    # requestオブジェクト内のGETメソッドがkeyを保持している！

        result = 'ロボ玉・Type:' + msg + 'なり！！'

    else:
        result = 'パラメータを設定してね！！'
    
    return HttpResponse(result)     # どちらかのresultをレスポンスとして返却する！



< クエリパラメーターをわかりやすく送付する工夫 >

「 http://localhost:8000/robotama/?id=12&name=ロボ玉 」から「 http://localhost:8000/robotama/12/ロボ玉 」にパラメータ送付方法を変える！


① 【 robotama_app/robotama/urls.pyの中身】

    urlpatterns = [

        # クエリパラメーター名idとnicknameを受け取れるように設定 => idの方はint(整数値)指定！
        path('<int:id>/<nickname>/', views.index, name = 'index'),
    ]

    # urlpatterns内で　<○○>　という値を使って記述すると、呼び出す関数に引数として渡すことができる！

② 【 robotama_app/robotama/views.pyの中身 】

    # '<int:id>/<nickname>/というアドレスのidとnicknameが「クエリパラメーター」となっている！

    def index(request, id, nickname):   # 引数でクエリパラメーターを受け取って、処理の中で使用する！

    result = 'your id: ' + str(id) + ', name: ' + nickname + 'なり！！'

    return HttpResponse(result)



---------------------------------------------------------------------------------------------------------------------------------------

< HTTP通信（リクエスト&レスポンス） >

HTTP通信

① Requestオブジェクト

② Responseオブジェクト



【 robotama_app/robotama/views.pyの中身 】

from django.http import HttpResponse # HttpResponse機能を読み込み！


def index(request):

    if 'msg' in request.GET:
        msg = request.GET['msg']
        result = 'ロボ玉・Type:' + msg + 'なり！！'

    else:
        result = 'パラメータを設定してね！！'
    
    return HttpResponse(result)
    

---------------------------------------------------------------------------------------------------------------------------------------

< テンプレート(HTMLファイル)を用意しよう！ >

1. テンプレートは、Web表示ページ(HTML)の中に変数や処理などを埋め込んだもの！

2. Djangoは、テンプレートを読み込むと、そこにある変数などに値を埋め込んでページを完成させたものをクライアントに送る！

    すなわち、変数やPythonの処理をHTMLに埋め込んでクライアントに送り返す！

3. テンプレートを利用するためには、「アプリケーションの登録」が必要！ => Djangoに「このプロジェクトでは、こういうアプリがあるのです！」と登録する！


4. templatesディレクトリを作成する必要がある！！

    「テンプレートはどこに書く？」=> templatesディレクトリ

    例えば、、、
    robotama_app/robotama/templates/
    と作成

5. templatesディレクトリ内にアプリと同名のディレクトリを作成する必要がある！！

    Djangoでは、templatesディレクトリ内にアプリと同名のディレクトリを用意して、そこにテンプレートを用意することを推奨している！

    他のアプリとHTMLファイルの命名が被っても、問題がないようにするため！

    例えば、、、

    【 robotamaアプリ 】
    robotama_app/robotama/templates/robotama/index.html
    と作成すれば

    テンプレートへのパスは、'robotama/index.html'となるので、他と識別がつくようになる！

    【 robotama2アプリ 】
    robotama_app/robotama2/templates/robotama2/index.html

    テンプレートへのパスは、'robotama2/index.html'となるので、robotamaアプリと重複しない！


6. テンプレートに値を渡す場合の仕組み

    ① テンプレート側では、{{ 変数名 }} (マスタッシュ)などで表示する！ => 「受け取る側（表示側・データ受信）の設定」

    ② 「views.py」のバックエンド処理では、params(パラメーター)を設定する！！ => 「受け渡す側（バックエンド・データ送信）の設定」

    【 templates/robotama/index.html 】

    <body>
        <h1>{{ title }}</h1>
        <h2>{{ msg }}</h2>
    </body>


    【 robotama/views.py 】

    def index(request):

        params = {
            'title': 'ロボ玉プロジェクト',
            'msg': 'ロボ玉試作1号機',
        }

        return render(request, 'robotama/index.html', params)
        

7. {%  %} (テンプレートタグ)とルーティング設定！

    {% url 名前 %} => urlpatterns内で設定した「name = ○○」が、ここで使用される！

    urlpatternsのnameがテンプレートの{% url %}で使える！


    【 templates/robotama/index.html 】

    <body>
        <h1>{{ title }}</h1>
        <h2>{{ msg }}</h2>
        <h3><a href="{% url goto %}">{{ link }}</a></h3>
    </body>

    【 robotama/urls.py 】


    # views関数にアドレスを設定している！

    urlpatterns = [
        path('', views.index, name = 'index'),
        path('next', views.next, name = 'next'),
    ]


    【 robotama/views.py 】

    def index(request):

        params = {
            'title': 'ロボ玉プロジェクト',
            'msg': 'ロボ玉試作1号機',
            'goto': 'next',
            'link': 'Nextページ',
        }

        return render(request, 'robotama/index.html', params)
    
    def next(request):

        params = {
            'title': 'ロボ玉開発計画',
            'msg': 'ロボ玉試作2号機',
            'goto': 'index',
            'link': 'Homeページ',
        }

        return render(request, 'robotama/index.html', params)

    
    【 robotama/urls.py 】

    # 2パターンのurl設定(アドレス設定・ルーティング設定)をしている！

    urlpatterns = [
        path('', views.index, name = 'index'),
        path('next', views.next, name = 'next'), 
    ]





---------------------------------------------------------------------------------------------------------------------------------------

< setting.py >

1. アプリケーションの登録のためのファイル

2. プロジェクトフォルダー(configフォルダー)内のファイル

3. 設定情報を保管する変数が記述されているファイル

    # 「INSTALLED_APPS」は、プロジェクトに組み込まれているアプリを登録する変数

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'robotama',                         # robotamaアプリを追加登録
    ]

4. Djangoのテンプレート機能を使用する場合は、テンプレート機能が該当アプリ(今回はrobotama)を検索できるようにするために登録する！

    「INSTALLED_APPS」にアプリを登録しないと、Djangoのテンプレート機能が、そのアプリを内にある「templates」フォルダを検索してくれない！






---------------------------------------------------------------------------------------------------------------------------------------

< モデルとデータベース >

0. SQLiteが標準DBとして組み込まれている！ => settings.pyに記載あり！

1. Djangoでは、データベースにテーブルを作っておく必要はない！ => プロジェクトにDB用のスクリプトを書いておけば、それを元に自動生成してくれる！

    「DBの構造」
    「 データベース => テーブル => レコード 」

2. Djangoでは「 models.py 」に「テーブル」に関するスクリプトを記載する！

    ①「モデル」=「テーブルの定義」

    ②「モデルのインスタンス」=「テーブルのレコード(記録)」


3. マイグレーションを実行する！ => データベースの移行を行うための機能

    マイグレーション(migration :移行) => migration(移行)により、作成した「モデル・スクリプト」から「テーブル」を作成する！！

    ① マイグレーションファイルを作成する！
    python manage.py makemigrations 実行プロジェクト名

    ② マイグレーションを実行する！
    python manage.py migrate




---------------------------------------------------------------------------------------------------------------------------------------

< Djangoの管理ツール >

1. DjangoDB管理者の作成コマンドで「管理者ユーザー」を作成！ => 登録すると管理ツールが使えるようになる！

    # DjangoDB管理者の作成コマンド
    python manage.py createsuperuser


2. admin.pyにモデルを登録する！

admin.site.register(Friend) # モデルクラスを登録！

adminster(管理者・管理する), register(登録・登録する)



---------------------------------------------------------------------------------------------------------------------------------------

< レコード取得の基本とManager >

モデルの「objects」と「all」







---------------------------------------------------------------------------------------------------------------------------------------

< DjangoでCRUD >

データベースアクセスの基本は、「CRUD」だ！！

Create(新規作成), Read(取得), Update(更新), Delete(削除)

1. Create(レコードの新規作成) => 「モデルのインスタンスを作成して、保存のメソッドを実行する」というやり方

    保存のメソッド => save()





---------------------------------------------------------------------------------------------------------------------------------------

< models.py >



< foreignKey(フォーエン・キー) >

# foreignKey(フォーエン・キー) => foreign(外国の・海外の)

# foreignKey => 外部キーのクラス => このモデルに割り当てられているテーブル以外のテーブル用のkeyという意味


---------------------------------------------------------------------------------------------------------------------------------------








